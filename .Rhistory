asy_accuracy_adjust_p <- p.adjust(asy_accuracy_p,method = "fdr")
absasy_accuracy_adjust_p <- p.adjust(absasy_accuracy_p,method = "fdr")
# AI with Age
mdl1 <- cor.test(data$FaceNames_Pos_Novel_Control_Putamen_Asymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl11 <- cor.test(data$FaceNames_Pos_Novel_Control_Putamen_AbsAsymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
plot(data$FaceNames_Pos_Novel_Control_Putamen_Asymmetry_LR, data$Age_CurrentVisit)
plot(data$FaceNames_Pos_Novel_Control_Putamen_AbsAsymmetry_LR, data$Age_CurrentVisit)
mdl2 <- cor.test(data$FaceNames_Pos_Novel_Control_Thal_VPL_Asymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl22 <- cor.test(data$FaceNames_Pos_Novel_Control_Thal_VPL_AbsAsymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
plot(data$FaceNames_Pos_Novel_Control_Thal_VPL_Asymmetry_LR, data$Age_CurrentVisit)
plot(data$FaceNames_Pos_Novel_Control_Thal_VPL_AbsAsymmetry_LR, data$Age_CurrentVisit)
mdl3 <- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_Asymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl33 <- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_AbsAsymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
plot(data$FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_Asymmetry_LR, data$Age_CurrentVisit)
plot(data$FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_AbsAsymmetry_LR, data$Age_CurrentVisit)
mdl4 <- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Mid_2_Asymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl44 <- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Mid_2_AbsAsymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
plot(data$FaceNames_Pos_Novel_Control_Frontal_Mid_2_Asymmetry_LR, data$Age_CurrentVisit)
plot(data$FaceNames_Pos_Novel_Control_Frontal_Mid_2_AbsAsymmetry_LR, data$Age_CurrentVisit)
mdl5 <- cor.test(data$FaceNames_Pos_Novel_Control_Supp_Motor_Area_Asymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl55 <- cor.test(data$FaceNames_Pos_Novel_Control_Supp_Motor_Area_AbsAsymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl6 <- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Med_Orb_Asymmetry_LR, data$Age_CurrentVisit, method = "pearson", use = "complete.obs")
mdl66 <- cor.test(data$Age_CurrentVisit, data$FaceNames_Pos_Novel_Control_Frontal_Med_Orb_AbsAsymmetry_LR, method = "pearson", use = "complete.obs")
pvalList1 <- c(mdl1$p.value, mdl2$p.value, mdl3$p.value, mdl4$p.value, mdl5$p.value, mdl6$p.value)
pvalList2 <- c(mdl11$p.value, mdl22$p.value, mdl33$p.value, mdl44$p.value, mdl55$p.value, mdl66$p.value)
correlation1 <- c(mdl1$estimate, mdl2$estimate, mdl3$estimate, mdl4$estimate, mdl5$estimate, mdl6$estimate)
correlation2 <- c(mdl11$estimate, mdl22$estimate, mdl33$estimate, mdl44$estimate, mdl55$estimate, mdl66$estimate)
#corr
asy_age_c <- correlation1
absasy_age_c <- correlation2
#p-values
asy_age_p <- pvalList1
absasy_age_p <- pvalList2
asy_age_adjust_p <- p.adjust(pvalList1, method = 'fdr')
absasy_age_adjust_p <- p.adjust(pvalList2, method = 'fdr')
# AI WITH SEX DIFFERENCE #######################################################
#Putamen **
mdl1 <- t.test(FaceNames_Pos_Novel_Control_Putamen_Asymmetry_LR ~ Sex, data = data)
mdl11 <- t.test(FaceNames_Pos_Novel_Control_Putamen_AbsAsymmetry_LR~Sex, data = data)
#Thalumus
mdl2 <- t.test(FaceNames_Pos_Novel_Control_Thal_VPL_Asymmetry_LR~Sex, data = data)
mdl22 <- t.test(FaceNames_Pos_Novel_Control_Thal_VPL_AbsAsymmetry_LR~Sex, data = data)
#Frontal_Med
mdl3 <- t.test(FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_Asymmetry_LR~Sex, data = data)
mdl33 <- t.test(FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_AbsAsymmetry_LR~Sex, data = data)
#Frontal_Mid **
mdl4 <- t.test(FaceNames_Pos_Novel_Control_Frontal_Mid_2_Asymmetry_LR~Sex, data = data)
mdl44 <- t.test(FaceNames_Pos_Novel_Control_Frontal_Mid_2_AbsAsymmetry_LR~Sex, data = data)
#Supp_motor_Area
mdl5 <- t.test(FaceNames_Pos_Novel_Control_Supp_Motor_Area_Asymmetry_LR~Sex, data = data)
mdl55 <- t.test(FaceNames_Pos_Novel_Control_Supp_Motor_Area_AbsAsymmetry_LR~Sex, data = data)
#Sup_Medial
mdl6 <- t.test(FaceNames_Pos_Novel_Control_Frontal_Med_Orb_Asymmetry_LR~Sex, data = data)
mdl66 <- t.test(FaceNames_Pos_Novel_Control_Frontal_Med_Orb_AbsAsymmetry_LR~Sex, data = data)
#t values
asy_Sex_t <- c(mdl1$statistic, mdl2$statistic, mdl3$statistic, mdl4$statistic, mdl5$statistic, mdl6$statistic)
absasy_Sex_t <- c(mdl11$statistic, mdl22$statistic, mdl33$statistic, mdl44$statistic, mdl55$statistic, mdl66$statistic)
#P values ######################################################################
pvalList1 <- c(mdl1$p.value, mdl2$p.value, mdl3$p.value, mdl4$p.value, mdl5$p.value, mdl6$p.value)
pvalList2 <- c(mdl11$p.value, mdl22$p.value, mdl33$p.value, mdl44$p.value, mdl55$p.value, mdl66$p.value)
asy_sex_p <- pvalList1
absasy_sex_p <- pvalList2
asy_sex_adjust_p <- p.adjust(pvalList1, method = 'fdr')
absasy_sex_adjust_p <- p.adjust(pvalList2, method = 'fdr')
#Asymmetry and Education
frontal_med_orb_asy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Med_Orb_Asymmetry_LR, data$Education, use = "complete.obs")
frontal_med_orb_absasy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Med_Orb_AbsAsymmetry_LR, data$Education, use = "complete.obs")
frontal_mid_asy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Mid_2_Asymmetry_LR, data$Education, use = "complete.obs")
frontal_mid_absasy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Mid_2_AbsAsymmetry_LR, data$Education, use = "complete.obs")
frontal_sup_medial_asy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_Asymmetry_LR, data$Education, use = "complete.obs")
frontal_sup_medial_absasy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Frontal_Sup_Medial_AbsAsymmetry_LR, data$Education, use = "complete.obs")
putamen_asy_education <- cor.test(data$FaceNames_Pos_Novel_Control_Putamen_Asymmetry_LR, data$Education, use = "complete.obs")
putamen_absasy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Putamen_AbsAsymmetry_LR, data$Education, use = "complete.obs")
supp_motor_area_asy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Supp_Motor_Area_Asymmetry_LR, data$Education, use = "complete.obs")
supp_motor_area_absasy_education <- cor.test(data$FaceNames_Pos_Novel_Control_Supp_Motor_Area_AbsAsymmetry_LR, data$Education, use = "complete.obs")
thal_VPL_asy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Thal_VPL_Asymmetry_LR, data$Education, use = "complete.obs")
thal_VPL_absasy_education<- cor.test(data$FaceNames_Pos_Novel_Control_Thal_VPL_AbsAsymmetry_LR, data$Education, use = "complete.obs")
#c-values
asy_education_c <- c(putamen_asy_education$estimate, thal_VPL_asy_education$estimate,
frontal_sup_medial_asy_education$estimate, frontal_mid_asy_education$estimate,
supp_motor_area_asy_education$estimate, frontal_med_orb_asy_education$estimate)
absasy_education_c <- c(putamen_absasy_education$estimate, thal_VPL_absasy_education$estimate,
frontal_sup_medial_absasy_education$estimate, frontal_mid_absasy_education$estimate,
supp_motor_area_absasy_education$estimate, frontal_med_orb_absasy_education$estimate)
#p adjustments
asy_education_p <- c(putamen_asy_education$p.value, thal_VPL_asy_education$p.value,
frontal_sup_medial_asy_education$p.value, frontal_mid_asy_education$p.value,
supp_motor_area_asy_education$p.value, frontal_med_orb_asy_education$p.value)
absasy_education_p <- c(putamen_absasy_education$p.value, thal_VPL_absasy_education$p.value,
frontal_sup_medial_absasy_education$p.value, frontal_mid_absasy_education$p.value,
supp_motor_area_absasy_education$p.value, frontal_med_orb_absasy_education$p.value)
asy_education_adjust_p <- p.adjust(asy_education_p,method = "fdr")
absasy_education_adjust_p <- p.adjust(absasy_education_p,method = "fdr",n=length(absasy_education_p))
## Report ##
## Demographics data
#Age
mean(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
t.test(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'])
#Chi square Sex
SexTable <- table(data$Sex, data$PiB_Median_Split)
chisq.test(SexTable)
#Chi square Race
RaceTable <- table(data$Race, data$PiB_Median_Split)
chisq.test(RaceTable)
#Chi square Sex
SexTable <- table(data$Sex, data$PiB_Median_Split)
chisq.test(SexTable)
#Chi square Race
RaceTable <- table(data$Race, data$PiB_Median_Split)
chisq.test(RaceTable)
RaceTable
## Demographics data
#Age
mean(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
t.test(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'])
#Chi square Sex
SexTable <- table(data$Sex, data$PiB_Median_Split)
chisq.test(SexTable)
(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male") / ~is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])
data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male"
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male", na.rm = TRUE)
sum(~is.na(data$Sex[data$PiB_Median_Split == 'high_PiB']))
is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])
~is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])
!is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])
data$Sex[data$PiB_Median_Split == 'high_PiB'
data$Sex[data$PiB_Median_Split == 'high_PiB']
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'], na.rm=TRUE)
data$Sex[data$PiB_Median_Split == 'high_PiB']
(~is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])
is.na(data$Sex[data$PiB_Median_Split == 'high_PiB']
is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])
sum(~(is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])))
sum(!(is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])))
)
#Percent Male (in PiB Split)
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])))
sum(data$Sex[data$PiB_Median_Split == 'low_PiB'] == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex[data$PiB_Median_Split == 'low_PiB'])))
data
mean(data$Age_CurrentVisit,na.rm = TRUE);
sd(data$Age_CurrentVisit, na.rm = TRUE);
#Chi square Sex
SexTable <- table(data$Sex, data$PiB_Median_Split)
chisq.test(SexTable)
#Percent Male (in PiB Split)
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])))
sum(data$Sex[data$PiB_Median_Split == 'low_PiB'] == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex[data$PiB_Median_Split == 'low_PiB'])))
#Percent Male (in PiB Split)
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male")
#Percent Male (in PiB Split)
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male",na.rm = TRUE)
sum(data$Sex[data$PiB_Median_Split == 'low_PiB'] == "Male", na.rm = TRUE)
## Demographics data
#Age
mean(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$Age_CurrentVisit[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$Age_CurrentVisit[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
#Sex
#Chi square Sex
SexTable <- table(data$Sex, data$PiB_Median_Split)
chisq.test(SexTable)
#Percent and Number Male (in PiB Split)
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male",na.rm = TRUE)
sum(data$Sex[data$PiB_Median_Split == 'high_PiB'] == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex[data$PiB_Median_Split == 'high_PiB'])))
sum(data$Sex[data$PiB_Median_Split == 'low_PiB'] == "Male", na.rm = TRUE)
sum(data$Sex[data$PiB_Median_Split == 'low_PiB'] == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex[data$PiB_Median_Split == 'low_PiB'])))
#Number/Percent Male in entire sample:
sum(data$Sex == "Male",na.rm = TRUE)
sum(data$Sex == "Male", na.rm = TRUE) / sum(!(is.na(data$Sex)))
#Race
#Chi square Race
RaceTable <- table(data$Race, data$PiB_Median_Split)
chisq.test(RaceTable)
data$Race
#Percent and Number White (in PiB Split)
sum(data$Race[data$PiB_Median_Split == 'high_PiB'] == "White",na.rm = TRUE)
sum(data$Race[data$PiB_Median_Split == 'high_PiB'] == "White", na.rm = TRUE) / sum(!(is.na(data$Race[data$PiB_Median_Split == 'high_PiB'])))
sum(data$Race[data$PiB_Median_Split == 'low_PiB'] == "White", na.rm = TRUE)
sum(data$Race[data$PiB_Median_Split == 'low_PiB'] == "White", na.rm = TRUE) / sum(!(is.na(data$Race[data$PiB_Median_Split == 'low_PiB'])))
#Percent and Number White (in PiB Split)
sum(data$Race[data$PiB_Median_Split == 'high_PiB'] == "White",na.rm = TRUE)
sum(data$Race[data$PiB_Median_Split == 'high_PiB'] == "White", na.rm = TRUE) / sum(!(is.na(data$Race[data$PiB_Median_Split == 'high_PiB'])))
sum(data$Race[data$PiB_Median_Split == 'low_PiB'] == "White", na.rm = TRUE)
sum(data$Race[data$PiB_Median_Split == 'low_PiB'] == "White", na.rm = TRUE) / sum(!(is.na(data$Race[data$PiB_Median_Split == 'low_PiB'])))
data$Race[data$PiB_Median_Split == 'high_PiB']
data$Race[data$PiB_Median_Split == 'low_PiB']
sum(data$Race[data$PiB_Median_Split == 'low_PiB'] == "White", na.rm = TRUE) / sum(!(is.na(data$Race[data$PiB_Median_Split == 'low_PiB'])))
#Number/Percent White in entire sample:
sum(data$Race == "White",na.rm = TRUE)
sum(data$Race == "White", na.rm = TRUE) / sum(!(is.na(data$Sex)))
#Education
mean(data$Education[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$Education[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$Education[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$Education[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
t.test(data$Education[data$PiB_Median_Split == 'low_PiB'], data$Education[data$PiB_Median_Split == 'high_PiB'])
#Global PiB
mean(data$PiB_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$PiB_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$PiB_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$PiB_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
t.test(data$PiB_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'high_PiB'], data$PiB_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'low_PiB'])
#FDG
mean(data$FDG_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$FDG_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$FDG_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$FDG_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
t.test(data$FDG_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'low_PiB'], data$FDG_SUVR_GTM_FS_Global[data$PiB_Median_Split == 'high_PiB'])
#WMHI
mean(data$FS_WM_hypointensities[data$PiB_Median_Split == 'high_PiB']/data$WMH_Volume_mm3[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
sd(data$FS_WM_hypointensities[data$PiB_Median_Split == 'high_PiB']/data$WMH_Volume_mm3[data$PiB_Median_Split == 'high_PiB'], na.rm= TRUE)
mean(data$FS_WM_hypointensities[data$PiB_Median_Split == 'low_PiB']/data$WMH_Volume_mm3[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
sd(data$FS_WM_hypointensities[data$PiB_Median_Split == 'low_PiB']/data$WMH_Volume_mm3[data$PiB_Median_Split == 'low_PiB'], na.rm= TRUE)
t.test(data$FS_WM_hypointensities[data$PiB_Median_Split == 'low_PiB']/data$WMH_Volume_mm3[data$PiB_Median_Split == 'low_PiB'],
data$FS_WM_hypointensities[data$PiB_Median_Split == 'high_PiB']/data$WMH_Volume_mm3[data$PiB_Median_Split == 'high_PiB'])
#Post Scan Accuracy
mean(as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'high_PiB']), na.rm= TRUE)
sd(as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'high_PiB']), na.rm= TRUE)
mean(as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'low_PiB']), na.rm= TRUE)
sd(as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'low_PiB']), na.rm= TRUE)
t.test(as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'low_PiB']),
as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'high_PiB']))
t.test(as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'low_PiB']),
as.numeric(data$FaceName_PostScanAccuracy[data$PiB_Median_Split == 'high_PiB']))
mean(data$PiB_SUVR_GTM_FS_Global, na.rm= TRUE)
sd(data$PiB_SUVR_GTM_FS_Global, na.rm= TRUE)
mean(data$FDG_SUVR_GTM_FS_Global, na.rm= TRUE)
sd(data$FDG_SUVR_GTM_FS_Global, na.rm= TRUE)
mean(data$FS_WM_hypointensities/data$WMH_Volume_mm3, na.rm= TRUE)
sd(data$FS_WM_hypointensities/data$WMH_Volume_mm3, na.rm= TRUE)
mean(as.numeric(data$FaceName_PostScanAccuracy), na.rm= TRUE)
sd(as.numeric(data$FaceName_PostScanAccuracy), na.rm= TRUE)
data$Age_CurrentVisit
sum(~is.na(data$Age_CurrentVisit))
sum(!is.na(data$Age_CurrentVisit))
sum(is.na(data$Age_CurrentVisit))
data$Age_CurrentVisit
#Number Missing
sum(is.na(data$Sex))
#Number Missing:
sum(is.na(data$Race))
data$Race
#Number Missing:
sum(data$Race=="NaN")
#Number Missing:
sum(is.na(data$Education))
#Number Missing
sum(is.na(data$PiB_SUVR_GTM_FS_Global))
#Number Missing:
sum(is.na(data$FDG_SUVR_GTM_FS_Global))
#Number Missing:
sum(is.na(data$FS_WM_hypointensities))
#Number Missing:
sum(is.na(data$FS_WM_hypointensities/data$WMH_Volume_mm3))
data$FS_WM_hypointensities/data$WMH_Volume_mm3
#Number Missing:
sum(is.na(data$FaceName_PostScanAccuracy))
#cognitive domains
#memory learning
t.test(data$memory_learning[data$PiB_Median_Split == 'low_PiB'],
data$memory_learning[data$PiB_Median_Split == 'high_PiB'])
#Number missing:
sum(is.na(data$memory_learning))
data$memory_learning
#cognitive domains
#memory learning
t.test(data$memory_learning[data$PiB_Median_Split == 'low_PiB'],
data$memory_learning[data$PiB_Median_Split == 'high_PiB'])
#Number missing:
sum(is.na(data$memory_retrieval))
#memory retrieval
t.test(data$memory_retrieval[data$PiB_Median_Split == 'high_PiB'],
data$memory_retrieval[data$PiB_Median_Split == 'low_PiB'])
#Number missing
sum(is.na(data$visuospatial))
#visuospatial
t.test(data$visuospatial[data$PiB_Median_Split == 'low_PiB'],
data$visuospatial[data$PiB_Median_Split == 'high_PiB'])
#Number missing
sum(is.na(data$language))
#language
t.test(data$language[data$PiB_Median_Split == 'low_PiB'],
data$language[data$PiB_Median_Split == 'high_PiB'])
#Number missing
sum(is.na(data$executive_attention))
#executive attention
t.test(data$executive_attention[data$PiB_Median_Split == 'low_PiB'],
data$executive_attention[data$PiB_Median_Split == 'high_PiB'])
## Individual Tests ####
mean(data$CLOCKD, na.rm = TRUE)
mean(data$BLOCKDES, na.rm = TRUE)
mean(data$BNT60TOT, na.rm = TRUE)
mean(data$REYCO, na.rm = TRUE)
mean(data$REYIM, na.rm = TRUE)
mean(data$REYDE, na.rm = TRUE)
mean(data$FLUEN, na.rm = TRUE)
mean(data$LETTER_FLUENCY, na.rm = TRUE)
mean(data$WREC_TOT, na.rm = TRUE)
mean(data$WRECDE, na.rm = TRUE)
mean(data$SPANSF, na.rm = TRUE)
mean(data$SPANSB, na.rm = TRUE)
mean(data$TRAILAS, na.rm = TRUE)
mean(data$TRAILBS, na.rm = TRUE)
mean(data$LMIAIMM, na.rm = TRUE)
mean(data$LMIIADEL, na.rm = TRUE)
mean(data$DIGSYMWR, na.rm = TRUE)
mean(data$STRINTERFERENCE, na.rm = TRUE)
sum(is.na(data$CLOCKD))
## Individual Tests ####
#ClockD
mean(data$CLOCKD, na.rm = TRUE)
mean(data$CLOCKD[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$CLOCKD[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
## Individual Tests ####
#ClockD
mean(data$CLOCKD, na.rm = TRUE)
mean(data$CLOCKD[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$CLOCKD[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$CLOCKD[data$PiB_Median_Split == 'low_PiB'],
data$CLOCKD[data$PiB_Median_Split == 'high_PiB'])
sum(is.na(data$CLOCKD))
#Logical Memory Immediate
mean(data$LMIAIMM, na.rm = TRUE)
sd(data$LMIAIMM, na.rm = TRUE)
sum(is.na(data$LMIAIMM))
mean(data$LMIAIMM[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$LMIAIMM[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$LMIAIMM[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$LMIAIMM[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$LMIAIMM[data$PiB_Median_Split == 'low_PiB'],
data$LMIAIMM[data$PiB_Median_Split == 'high_PiB'])
#Logical Memory Delayed
mean(data$LMIIADEL, na.rm = TRUE)
sd(data$LMIIADEL, na.rm = TRUE)
sum(is.na(data$LMIIADEL))
mean(data$LMIIADEL[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$LMIIADEL[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$LMIIADEL[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$LMIIADEL[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$LMIIADEL[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$LMIIADEL[data$PiB_Median_Split == 'low_PiB'],
data$LMIIADEL[data$PiB_Median_Split == 'high_PiB'])
#Digit Symbol Substitution
mean(data$DIGSYMWR, na.rm = TRUE)
sd(data$DIGSYMWR, na.rm = TRUE)
sum(is.na(data$DIGSYMWR))
mean(data$DIGSYMWR[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$DIGSYMWR[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$DIGSYMWR[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$DIGSYMWR[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$DIGSYMWR[data$PiB_Median_Split == 'low_PiB'],
data$DIGSYMWR[data$PiB_Median_Split == 'high_PiB'])
#Stroop Interference
mean(data$STRINTERFERENCE, na.rm = TRUE)
sd(data$STRINTERFERENCE, na.rm = TRUE)
sum(is.na(data$STRINTERFERENCE))
mean(data$STRINTERFERENCE[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$STRINTERFERENCE[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$STRINTERFERENCE[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$STRINTERFERENCE[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$STRINTERFERENCE[data$PiB_Median_Split == 'low_PiB'],
data$STRINTERFERENCE[data$PiB_Median_Split == 'high_PiB'])
#Block Design
mean(data$BLOCKDES, na.rm = TRUE)
sd(data$BLOCKDES, na.rm = TRUE)
sum(is.na(data$BLOCKDES))
mean(data$BLOCKDES[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$BLOCKDES[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$BLOCKDES[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$BLOCKDES[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$BLOCKDES[data$PiB_Median_Split == 'low_PiB'],
data$BLOCKDES[data$PiB_Median_Split == 'high_PiB'])
#60-item Boston Naming Test
mean(data$BNT60TOT, na.rm = TRUE)
sd(data$BNT60TOT, na.rm = TRUE)
sum(is.na(data$BNT60TOT))
mean(data$BNT60TOT[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$BNT60TOT[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$BNT60TOT[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$BNT60TOT[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$BNT60TOT[data$PiB_Median_Split == 'low_PiB'],
data$BNT60TOT[data$PiB_Median_Split == 'high_PiB'])
#Rey-Osterreith Figure Copy
mean(data$REYCO, na.rm = TRUE)
sd(data$REYCO, na.rm = TRUE)
sum(is.na(data$REYCO))
a
a
mean(data$REYCO[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$REYCO[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$REYCO[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$REYCO[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$REYCO[data$PiB_Median_Split == 'low_PiB'],
data$REYCO[data$PiB_Median_Split == 'high_PiB'])
#Rey-Osterreith Figure Immediate
mean(data$REYIM, na.rm = TRUE)
sd(data$REYIM, na.rm = TRUE)
sum(is.na(data$REYIM))
mean(data$REYIM[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$REYIM[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$REYIM[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$REYIM[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$REYIM[data$PiB_Median_Split == 'low_PiB'],
data$REYIM[data$PiB_Median_Split == 'high_PiB'])
#Rey-Osterreith Figure Delayed
mean(data$REYDE, na.rm = TRUE)
sd(data$REYDE, na.rm = TRUE)
sum(is.na(data$REYDE))
mean(data$REYDE[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$REYDE[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$REYDE[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$REYDE[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$REYDE[data$PiB_Median_Split == 'low_PiB'],
data$REYDE[data$PiB_Median_Split == 'high_PiB'])
#Animal Fluency
mean(data$FLUEN, na.rm = TRUE)
sd(data$FLUEN, na.rm = TRUE)
sum(is.na(data$FLUEN))
mean(data$FLUEN[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$FLUEN[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$FLUEN[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$FLUEN[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$FLUEN[data$PiB_Median_Split == 'low_PiB'],
data$FLUEN[data$PiB_Median_Split == 'high_PiB'])
#Letter Fluency
mean(data$LETTER_FLUENCY, na.rm = TRUE)
sd(data$LETTER_FLUENCY, na.rm = TRUE)
sum(is.na(data$LETTER_FLUENCY))
mean(data$LETTER_FLUENCY[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$LETTER_FLUENCY[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$LETTER_FLUENCY[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$LETTER_FLUENCY[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$LETTER_FLUENCY[data$PiB_Median_Split == 'low_PiB'],
data$LETTER_FLUENCY[data$PiB_Median_Split == 'high_PiB'])
#ADRC Word List Immediate
mean(data$WREC_TOT, na.rm = TRUE)
sd(data$WREC_TOT, na.rm = TRUE)
sum(is.na(data$WREC_TOT))
mean(data$WREC_TOT[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$WREC_TOT[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$WREC_TOT[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$WREC_TOT[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$WREC_TOT[data$PiB_Median_Split == 'low_PiB'],
data$WREC_TOT[data$PiB_Median_Split == 'high_PiB'])
#ADRC Word List Delayed
mean(data$WRECDE, na.rm = TRUE)
sd(data$WRECDE, na.rm = TRUE)
sum(is.na(data$WRECDE))
mean(data$WRECDE[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$WRECDE[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$WRECDE[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$WRECDE[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$WRECDE[data$PiB_Median_Split == 'low_PiB'],
data$WRECDE[data$PiB_Median_Split == 'high_PiB'])
#Digit Span Forward
mean(data$SPANSF, na.rm = TRUE)
sd(data$SPANSF, na.rm = TRUE)
sum(is.na(data$SPANSF))
mean(data$SPANSF[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$SPANSF[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$SPANSF[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$SPANSF[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$SPANSF[data$PiB_Median_Split == 'low_PiB'],
data$SPANSF[data$PiB_Median_Split == 'high_PiB'])
#Digit Span Backward
mean(data$SPANSB, na.rm = TRUE)
sd(data$SPANSB, na.rm = TRUE)
sum(is.na(data$SPANSB))
mean(data$SPANSB[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$SPANSB[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$SPANSB[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$SPANSB[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$SPANSB[data$PiB_Median_Split == 'low_PiB'],
data$SPANSB[data$PiB_Median_Split == 'high_PiB'])
#Trail MAking Test A
mean(data$TRAILAS, na.rm = TRUE)
sd(data$TRAILAS, na.rm = TRUE)
sum(is.na(data$TRAILAS))
mean(data$TRAILAS[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$TRAILAS[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$TRAILAS[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$TRAILAS[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$TRAILAS[data$PiB_Median_Split == 'low_PiB'],
data$TRAILAS[data$PiB_Median_Split == 'high_PiB'])
#Trail Making Test B
mean(data$TRAILBS, na.rm = TRUE)
sd(data$TRAILBS, na.rm = TRUE)
sum(is.na(data$TRAILBS))
mean(data$TRAILBS[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$TRAILBS[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$TRAILBS[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$TRAILBS[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$TRAILBS[data$PiB_Median_Split == 'low_PiB'],
data$TRAILBS[data$PiB_Median_Split == 'high_PiB'])
## Individual Tests ####
#Clock Design
mean(data$CLOCKD, na.rm = TRUE)
sd(data$CLOCKD, na.rm = TRUE)
sum(is.na(data$CLOCKD))
mean(data$CLOCKD[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
sd(data$CLOCKD[data$PiB_Median_Split == 'high_PiB'], na.rm = TRUE)
mean(data$CLOCKD[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
sd(data$CLOCKD[data$PiB_Median_Split == 'low_PiB'], na.rm = TRUE)
t.test(data$CLOCKD[data$PiB_Median_Split == 'low_PiB'],
data$CLOCKD[data$PiB_Median_Split == 'high_PiB'])
